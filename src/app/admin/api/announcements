import { NextResponse } from "next/server";
import { promises as fs } from "fs";
import path from "path";
import { Announcement } from "@/lib/types";

const dataFilePath = path.join(process.cwd(), "src/data/announcements.json");

async function ensureFileExists() {
  try {
    await fs.access(dataFilePath);
  } catch {
    // File doesn't exist, create it with empty array
    await fs.writeFile(dataFilePath, "[]", "utf8");
  }
}

async function getAnnouncementsFromFile(): Promise<Announcement[]> {
  try {
    await ensureFileExists();
    const data = await fs.readFile(dataFilePath, "utf8");
    return JSON.parse(data);
  } catch (error) {
    console.error("Error reading announcements:", error);
    return [];
  }
}

async function saveAnnouncementsToFile(announcements: Announcement[]) {
  try {
    await ensureFileExists();
    await fs.writeFile(
      dataFilePath,
      JSON.stringify(announcements, null, 2),
      "utf8"
    );
  } catch (error) {
    console.error("Error writing announcements:", error);
    throw new Error("Failed to save announcements");
  }
}

export async function GET() {
  try {
    const announcements = await getAnnouncementsFromFile();
    return NextResponse.json(announcements);
  } catch (error) {
    console.error("Error in GET /api/announcements:", error);
    return NextResponse.json(
      { error: "Failed to fetch announcements" },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { title, content, priority } = body;

    if (!title || !content || !priority) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    const announcements = await getAnnouncementsFromFile();
    const newAnnouncement: Announcement = {
      id: crypto.randomUUID(),
      title,
      content,
      priority,
      date: new Date().toISOString(),
    };

    announcements.push(newAnnouncement);
    await saveAnnouncementsToFile(announcements);

    return NextResponse.json(newAnnouncement);
  } catch (error) {
    console.error("Error in POST /api/announcements:", error);
    return NextResponse.json(
      { error: "Failed to create announcement" },
      { status: 500 }
    );
  }
}

export async function DELETE(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "Missing announcement ID" },
        { status: 400 }
      );
    }

    const announcements = await getAnnouncementsFromFile();
    const filtered = announcements.filter((a) => a.id !== id);
    await saveAnnouncementsToFile(filtered);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error in DELETE /api/announcements:", error);
    return NextResponse.json(
      { error: "Failed to delete announcement" },
      { status: 500 }
    );
  }
}
