"use client";

import { useAuth } from "@/lib/auth-context";
import { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { Loader2, Video } from "lucide-react";
import { useRouter } from "next/navigation";
import VideoCall from "@/components/video-call";

interface SupportRequest {
  id: string;
  roomId: string;
  createdAt: string;
  status: "pending" | "active" | "completed";
}

export default function AdminSupportPage() {
  const router = useRouter();
  const { isAuthenticated } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [supportRequests, setSupportRequests] = useState<SupportRequest[]>([]);
  const [activeCall, setActiveCall] = useState<string | null>(null);

  useEffect(() => {
    if (!isAuthenticated) {
      router.push("/");
      return;
    }

    const fetchRequests = async () => {
      try {
        const response = await fetch("/api/video/create-support-request");
        if (!response.ok) throw new Error("Failed to fetch requests");
        const data = await response.json();
        setSupportRequests(
          data.filter((req: SupportRequest) => req.status === "pending")
        );
      } catch (error) {
        console.error("Error fetching requests:", error);
        toast.error("Failed to load support requests");
      } finally {
        setIsLoading(false);
      }
    };

    fetchRequests();
    const interval = setInterval(fetchRequests, 5000);
    return () => clearInterval(interval);
  }, [isAuthenticated, router]);

  const handleJoinCall = (request: SupportRequest) => {
    setActiveCall(request.roomId);

    // Update request status to active
    fetch(`/api/video/update-support-request`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        id: request.id,
        status: "active",
      }),
    }).catch((error) => {
      console.error("Error updating request status:", error);
    });
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <main className="container max-w-4xl mx-auto p-4 py-8">
      <Card className="p-6">
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold">Support Dashboard</h1>
            {!activeCall && (
              <p className="text-sm text-muted-foreground">
                {supportRequests.length} pending requests
              </p>
            )}
          </div>

          {isLoading ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin" />
              <span className="ml-2">Loading support requests...</span>
            </div>
          ) : activeCall ? (
            <VideoCall roomId={activeCall} isAdmin />
          ) : supportRequests.length === 0 ? (
            <div className="text-center py-12">
              <Video className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
              <h2 className="text-lg font-medium mb-2">
                No Active Support Requests
              </h2>
              <p className="text-sm text-muted-foreground">
                When users request support, their calls will appear here.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {supportRequests.map((request) => (
                <Card key={request.id} className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-medium">Support Request</h3>
                      <p className="text-sm text-muted-foreground">
                        Requested:{" "}
                        {new Date(request.createdAt).toLocaleString()}
                      </p>
                    </div>
                    <Button onClick={() => handleJoinCall(request)}>
                      Join Call
                    </Button>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </Card>
    </main>
  );
}
