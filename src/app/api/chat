import { NextResponse } from "next/server";
import { generateResponse } from "@/lib/gemini";
import { getLocations } from "@/lib/locations-store";
import { promises as fs } from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "src/data/locations.json");

export async function POST(request: Request) {
  try {
    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json(
        { error: "Gemini API key is not configured" },
        { status: 500 }
      );
    }

    const { message } = await request.json();

    if (!message) {
      return NextResponse.json(
        { error: "Message is required" },
        { status: 400 }
      );
    }

    // Get locations data directly from file
    let locations = [];
    try {
      const data = await fs.readFile(dataFilePath, "utf8");
      locations = JSON.parse(data);
      console.log("Loaded locations from file:", locations);
    } catch (error) {
      console.error("Error reading locations file:", error);
      locations = [];
    }

    if (!Array.isArray(locations) || locations.length === 0) {
      console.error("No locations available");
      return NextResponse.json(
        { error: "No location information available" },
        { status: 500 }
      );
    }

    // Generate response using Gemini
    const response = await generateResponse(message, locations);

    if (!response) {
      return NextResponse.json(
        { error: "Failed to generate response" },
        { status: 500 }
      );
    }

    return NextResponse.json({ response });
  } catch (error) {
    console.error("Error in chat route:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    return NextResponse.json(
      { error: `Failed to generate response: ${errorMessage}` },
      { status: 500 }
    );
  }
}
