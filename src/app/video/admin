"use client";

import { useAuth } from "@/lib/auth-context";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";
import VideoCall from "@/components/video-call";

interface SupportRequest {
  id: string;
  roomId: string;
  createdAt: string;
  status: "pending" | "active" | "completed";
}

export default function AdminVideoPage() {
  const { isAuthenticated } = useAuth();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [supportRequests, setSupportRequests] = useState<SupportRequest[]>([]);
  const [activeCall, setActiveCall] = useState<string | null>(null);

  useEffect(() => {
    if (!isAuthenticated) {
      router.push("/");
      return;
    }

    const fetchRequests = async () => {
      try {
        const response = await fetch("/api/video/create-support-request");
        if (!response.ok) {
          throw new Error("Failed to fetch support requests");
        }
        const data = await response.json();
        setSupportRequests(
          data.filter((req: SupportRequest) => req.status === "pending")
        );
      } catch (error) {
        console.error("Error fetching support requests:", error);
        toast.error("Failed to load support requests");
      } finally {
        setIsLoading(false);
      }
    };

    fetchRequests();
    const interval = setInterval(fetchRequests, 10000);
    return () => clearInterval(interval);
  }, [isAuthenticated, router]);

  const handleJoinCall = (roomId: string) => {
    setActiveCall(roomId);
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <main className="container max-w-4xl mx-auto p-4 py-8">
      <Card className="p-6">
        <h1 className="text-2xl font-bold mb-4">Support Dashboard</h1>

        {isLoading ? (
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">Loading support requests...</span>
          </div>
        ) : activeCall ? (
          <VideoCall roomId={activeCall} isAdmin />
        ) : supportRequests.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            No pending support calls. Waiting for users...
          </div>
        ) : (
          <div className="space-y-4">
            <h2 className="text-lg font-semibold">Pending Support Calls</h2>
            {supportRequests.map((request) => (
              <div
                key={request.id}
                className="flex items-center justify-between p-4 border rounded-lg"
              >
                <div>
                  <p className="font-medium">Support Request</p>
                  <p className="text-sm text-muted-foreground">
                    Created: {new Date(request.createdAt).toLocaleString()}
                  </p>
                </div>
                <Button onClick={() => handleJoinCall(request.roomId)}>
                  Join Call
                </Button>
              </div>
            ))}
          </div>
        )}
      </Card>
    </main>
  );
}
